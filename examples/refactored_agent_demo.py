"""
Ejemplo de Uso - Agente CV Refactorizado

Demuestra el uso de la nueva arquitectura refactorizada del m√≥dulo agent.
"""

import asyncio
from typing import Dict, Any

# Importaciones de la nueva estructura
from agent import CVOrchestrator
from agent.utils.config import AgentConfig
from agent.utils.logger import AgentLogger
from agent.core.query_classifier import QueryCategory, RecommendedTool


async def demo_refactored_agent():
    """Demostraci√≥n del agente refactorizado"""
    
    print("üöÄ Demo: Agente CV Refactorizado")
    print("=" * 50)
    
    # 1. Configuraci√≥n
    print("\n1Ô∏è‚É£ Inicializando configuraci√≥n...")
    try:
        config = AgentConfig.from_env()
        print(f"   ‚úÖ Configuraci√≥n cargada: {config.openai.model}")
        print(f"   üìß Email configurado: {config.email.is_configured()}")
    except Exception as e:
        print(f"   ‚ùå Error en configuraci√≥n: {e}")
        return
    
    # 2. Inicializar orquestador
    print("\n2Ô∏è‚É£ Inicializando orquestador...")
    try:
        orchestrator = CVOrchestrator(config)
        print("   ‚úÖ Orquestador inicializado exitosamente")
    except Exception as e:
        print(f"   ‚ùå Error inicializando orquestador: {e}")
        return
    
    # 3. Consultas de ejemplo
    example_queries = [
        "¬øCu√°l es tu experiencia en microservicios?",
        "¬øQu√© proyectos has desarrollado en fintech?", 
        "¬øCu√°l es tu email de contacto?",
        "H√°blame sobre tu experiencia general",
        "¬øQu√© tecnolog√≠as dominas?"
    ]
    
    print(f"\n3Ô∏è‚É£ Procesando {len(example_queries)} consultas de ejemplo...")
    
    for i, query in enumerate(example_queries, 1):
        print(f"\n--- Consulta {i}: {query} ---")
        
        try:
            # Procesar consulta
            result = orchestrator.process_query(
                query=query,
                context={"session_id": "demo", "user_preferences": {"detail_level": 3}}
            )
            
            # Mostrar resultados
            classification = result.get("classification", {})
            evaluation = result.get("evaluation", {})
            
            print(f"üìä Clasificaci√≥n:")
            print(f"   Categor√≠a: {classification.get('category', 'N/A')}")
            print(f"   Tool recomendado: {classification.get('recommended_tool', 'N/A')}")
            print(f"   Confianza: {classification.get('confidence', 0):.1f}%")
            
            print(f"üìà Evaluaci√≥n:")
            print(f"   Puntuaci√≥n: {evaluation.get('overall_score', 0):.1f}/10")
            print(f"   ¬øAlta calidad?: {'‚úÖ' if evaluation.get('overall_score', 0) >= 7.0 else '‚ùå'}")
            
            print(f"üîß Metadata:")
            metadata = result.get("metadata", {})
            print(f"   Fuente: {result.get('source', 'N/A')}")
            print(f"   Herramientas: {metadata.get('tools_used', [])}")
            
            response = result.get("response", "")
            print(f"üí¨ Respuesta: {response[:100]}{'...' if len(response) > 100 else ''}")
            
            # Manejar preguntas de aclaraci√≥n
            if "clarification_questions" in result:
                print("‚ùì Preguntas de aclaraci√≥n:")
                for j, question in enumerate(result["clarification_questions"], 1):
                    print(f"   {j}. {question}")
        
        except Exception as e:
            print(f"   ‚ùå Error procesando consulta: {e}")
    
    # 4. Estad√≠sticas finales
    print(f"\n4Ô∏è‚É£ Estad√≠sticas finales:")
    
    try:
        stats = orchestrator.get_session_stats()
        
        print(f"üìä Sesi√≥n:")
        print(f"   Total consultas: {stats['total_queries']}")
        print(f"   Exitosas: {stats['successful_queries']}")
        print(f"   Tiempo promedio: {stats['average_response_time']:.2f}s")
        
        print(f"üîç Clasificador:")
        classifier_stats = stats.get('classifier_stats', {})
        print(f"   Tasa de √©xito: {classifier_stats.get('success_rate', 0):.1f}%")
        
        print(f"üìà Evaluador:")
        evaluator_stats = stats.get('evaluator_stats', {})
        print(f"   Puntuaci√≥n promedio: {evaluator_stats.get('average_score', 0):.1f}/10")
        print(f"   Respuestas de calidad: {evaluator_stats.get('quality_rate', 0):.1f}%")
        
    except Exception as e:
        print(f"   ‚ùå Error obteniendo estad√≠sticas: {e}")
    
    # 5. Demostraci√≥n de componentes individuales
    print(f"\n5Ô∏è‚É£ Demo componentes individuales:")
    
    # Clasificador
    print("\nüîç Clasificador de consultas:")
    try:
        test_query = "¬øQu√© experiencia tienes trabajando con APIs?"
        classification = orchestrator.query_classifier.classify(test_query)
        
        print(f"   Query: {test_query}")
        print(f"   Categor√≠a: {classification.category.value}")
        print(f"   Tool: {classification.recommended_tool.value}")
        print(f"   T√©rminos de b√∫squeda: {classification.search_terms}")
        print(f"   ¬øNecesita aclaraci√≥n?: {classification.needs_clarification()}")
        
    except Exception as e:
        print(f"   ‚ùå Error en clasificador: {e}")
    
    # Evaluador
    print("\nüìà Evaluador de respuestas:")
    try:
        test_response = "Tengo amplia experiencia desarrollando APIs RESTful con Spring Boot, incluyendo autenticaci√≥n JWT, documentaci√≥n con Swagger y testing automatizado."
        evaluation = orchestrator.response_evaluator.evaluate_response(
            query="¬øQu√© experiencia tienes con APIs?",
            response=test_response,
            context="Informaci√≥n t√©cnica espec√≠fica del CV"
        )
        
        print(f"   Puntuaci√≥n general: {evaluation.scores.overall_score:.1f}/10")
        print(f"   Precisi√≥n: {evaluation.scores.precision:.1f}/10")
        print(f"   Completitud: {evaluation.scores.completeness:.1f}/10")
        print(f"   Relevancia: {evaluation.scores.relevance:.1f}/10")
        print(f"   Fortalezas: {', '.join(evaluation.strengths[:2])}")
        
    except Exception as e:
        print(f"   ‚ùå Error en evaluador: {e}")
    
    # Generador de aclaraciones
    print("\n‚ùì Generador de aclaraciones:")
    try:
        vague_query = "Informaci√≥n sobre proyectos"
        questions = orchestrator.clarifier_agent.generate_clarifications(vague_query)
        
        print(f"   Query vaga: {vague_query}")
        print(f"   Preguntas generadas:")
        for i, question in enumerate(questions, 1):
            print(f"     {i}. {question}")
            
    except Exception as e:
        print(f"   ‚ùå Error en generador de aclaraciones: {e}")
    
    # 6. Test de email (si est√° configurado)
    if config.email.is_configured():
        print(f"\nüìß Test de configuraci√≥n de email:")
        try:
            test_result = orchestrator.email_agent.test_email_configuration()
            print(f"   Configuraci√≥n v√°lida: {'‚úÖ' if test_result['configuration_valid'] else '‚ùå'}")
            print(f"   Conexi√≥n exitosa: {'‚úÖ' if test_result['connection_successful'] else '‚ùå'}")
            for detail in test_result['details']:
                print(f"   - {detail}")
                
        except Exception as e:
            print(f"   ‚ùå Error en test de email: {e}")
    else:
        print(f"\nüìß Email no configurado (opcional)")
    
    print(f"\nüéâ Demo completada exitosamente!")
    print("=" * 50)


async def demo_advanced_features():
    """Demostraci√≥n de caracter√≠sticas avanzadas"""
    
    print("\nüî¨ Demo: Caracter√≠sticas Avanzadas")
    print("=" * 40)
    
    try:
        config = AgentConfig.from_env()
        orchestrator = CVOrchestrator(config)
        
        # An√°lisis de necesidad de aclaraci√≥n
        print("\n1Ô∏è‚É£ An√°lisis de necesidad de aclaraci√≥n:")
        
        queries_to_analyze = [
            "¬øQu√©?",  # Muy vaga
            "Informaci√≥n",  # Muy vaga
            "¬øQu√© experiencia tienes en desarrollo de APIs RESTful con Spring Boot?",  # Espec√≠fica
            "H√°blame de proyectos y tecnolog√≠as y experiencia"  # M√∫ltiples temas
        ]
        
        for query in queries_to_analyze:
            analysis = orchestrator.clarifier_agent.analyze_clarification_need(query)
            print(f"   '{query}'")
            print(f"   ‚Üí Necesita aclaraci√≥n: {'‚úÖ' if analysis['needs_clarification'] else '‚ùå'}")
            print(f"   ‚Üí Confianza: {analysis['confidence']}%")
            print(f"   ‚Üí Urgencia: {analysis['urgency']}")
            if analysis['reasons']:
                print(f"   ‚Üí Razones: {', '.join(analysis['reasons'])}")
            print()
        
        # Auto-cr√≠tica del sistema
        print("2Ô∏è‚É£ Auto-cr√≠tica del sistema:")
        
        test_query = "¬øQu√© proyectos de fintech has desarrollado?"
        result = orchestrator.process_query(test_query)
        
        critique = orchestrator.response_evaluator.self_critique(
            query=test_query,
            response=result.get("response", ""),
            tools_used=result.get("metadata", {}).get("tools_used", []),
            context_quality="high"
        )
        
        print(f"   Query: {test_query}")
        print(f"   √âxito: {'‚úÖ' if critique['success'] else '‚ùå'}")
        print(f"   Cr√≠tica: {critique['critique']}")
        print(f"   Puntuaci√≥n: {critique.get('overall_score', 'N/A')}")
        
        insights = critique.get('insights', {})
        if insights:
            print(f"   Insights:")
            for key, value in insights.items():
                print(f"     - {key}: {value}")
        
        recommendations = critique.get('recommendations', [])
        if recommendations:
            print(f"   Recomendaciones:")
            for rec in recommendations:
                print(f"     - {rec}")
        
    except Exception as e:
        print(f"‚ùå Error en demo avanzada: {e}")


def main():
    """Funci√≥n principal"""
    print("ü§ñ Sistema de Agente CV - Demo Refactorizado")
    print("=" * 60)
    
    # Verificar configuraci√≥n b√°sica
    try:
        config = AgentConfig.from_env()
        print("‚úÖ Configuraci√≥n b√°sica verificada")
    except Exception as e:
        print(f"‚ùå Error de configuraci√≥n: {e}")
        print("üí° Aseg√∫rate de tener configurada la variable OPENAI_API_KEY")
        return
    
    # Ejecutar demos
    try:
        # Demo principal
        asyncio.run(demo_refactored_agent())
        
        # Demo avanzada
        asyncio.run(demo_advanced_features())
        
        print("\nüéØ Pr√≥ximos pasos:")
        print("1. Revisar logs generados en 'logs/agent.log'")
        print("2. Configurar email para funcionalidad completa")
        print("3. Personalizar configuraci√≥n seg√∫n necesidades")
        print("4. Integrar con el resto de la aplicaci√≥n")
        
    except KeyboardInterrupt:
        print("\nüëã Demo interrumpida por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")


if __name__ == "__main__":
    main()
# Docker Compose con Nginx Load Balancer
# Para ejecutar: docker-compose -f docker-compose.scaled.yml up -d --scale agente-cv=3

version: "3.8"

services:
  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: agente-cv-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx-logs:/var/log/nginx
      - ./nginx-cache:/var/cache/nginx
    depends_on:
      - agente-cv
    restart: unless-stopped
    networks:
      - agente-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Aplicación agente-cv (múltiples réplicas)
  agente-cv:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - PYTHONUNBUFFERED=1
      - HOST=0.0.0.0
      - PORT=8000
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./storage:/app/storage
      - ./config:/app/config
    restart: unless-stopped
    networks:
      - agente-network
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-c",
          "import requests; requests.get('http://localhost:8000/health')",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 2G
        reservations:
          cpus: "0.5"
          memory: 1G
      # Modo swarm (opcional)
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

networks:
  agente-network:
    driver: bridge

volumes:
  nginx-cache:
  nginx-logs:
